name: Deploy SBM Analyzer

on:
  push:
    branches:
      - main

jobs:
  deploy-analyzer:
    runs-on: ubuntu-latest
    environment: prod

    steps:
      # 1. リポジトリをチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. 成果物をEC2にデプロイ
      - name: Deploy code to EC2
        uses: burnett01/rsync-deployments@5.1
        with:
          switches: '-avz --delete --rsync-path="sudo rsync"'
          path: ./ # ローカルのコードパス
          remote_path: /srv/sbm/analyzer/ # EC2のデプロイ先ディレクトリ
          remote_host: ${{ secrets.HOST }}
          remote_user: ${{ secrets.USER }}
          remote_key: ${{ secrets.SECRET_KEY }}

      # 3. Conda 環境で依存関係のインストール
      - name: Set up Python environment and install dependencies
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SECRET_KEY }}
          script: |
            cd /srv/sbm/analyzer
            source ~/miniconda3/bin/activate
            conda activate sbm-analyzer
            pip install --upgrade pip
            pip install -r requirements.txt

      # 4. .env ファイルの生成
      - name: Generate .env file
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SECRET_KEY }}
          script: |
            sudo chmod 777 /srv/sbm/analyzer/
            cp /srv/sbm/analyzer/.env.example /srv/sbm/analyzer/.env
            sed -i "s|ENVIRONMENT=.*|ENVIRONMENT=prod|" /srv/sbm/analyzer/.env
            sed -i "s|DB_USER=.*|DB_USER=${{ secrets.DB_USER }}|" /srv/sbm/analyzer/.env
            sed -i "s|DB_PASSWORD=.*|DB_PASSWORD=${{ secrets.DB_PASSWORD }}|" /srv/sbm/analyzer/.env
            sed -i "s|DB_HOST=.*|DB_HOST=${{ secrets.DB_HOST }}|" /srv/sbm/analyzer/.env
            sed -i "s|DB_PORT=.*|DB_PORT=${{ secrets.DB_PORT }}|" /srv/sbm/analyzer/.env
            sed -i "s|DB_NAME=.*|DB_NAME=${{ secrets.DB_NAME }}|" /srv/sbm/analyzer/.env
            sudo chmod 755 /srv/sbm/analyzer/
            sudo chown -R ubuntu:ubuntu /srv/sbm/analyzer/

      # 5. 既存のプロセスを停止
      - name: Stop existing process
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SECRET_KEY }}
          script: |
            cd /srv/sbm/analyzer
            # 既存のPythonプロセスを安全に停止
            if pgrep -f "python run.py" > /dev/null; then
              echo "🛑 既存のプロセスを停止中..."
              pkill -TERM -f "python run.py" || true
              sleep 5
              # 強制終了が必要な場合
              if pgrep -f "python run.py" > /dev/null; then
                echo "🛑 強制終了を実行..."
                pkill -KILL -f "python run.py" || true
                sleep 2
              fi
            else
              echo "ℹ️ 停止するプロセスが見つかりません"
            fi

      # 6. アプリを起動
      - name: Start application
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SECRET_KEY }}
          script: |
            cd /srv/sbm/analyzer
            source ~/miniconda3/bin/activate
            conda activate sbm-analyzer
            # 既存のログファイルをクリア
            > app.log
            # バックグラウンドでアプリを起動
            nohup python run.py > app.log 2>&1 &
            # プロセスIDを保存
            echo $! > app.pid
            echo "🚀 アプリケーションを起動しました (PID: $(cat app.pid))"
            sleep 3

      # 7. ヘルスチェック
      - name: Health check
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SECRET_KEY }}
          script: |
            echo "🏥 ヘルスチェック中..."
            sleep 10
            # プロセスが動いているか確認
            if pgrep -f "python run.py" > /dev/null; then
              echo "✅ プロセスが正常に起動しています"
              # ポート5000でリッスンしているか確認
              if netstat -tlnp | grep :5000 > /dev/null; then
                echo "✅ ポート5000で正常にリッスンしています"
                # アプリケーションのレスポンスを確認
                if curl -f http://localhost:5000/api/v1/analysis/category?start_date=2024-01-01&end_date=2024-01-01&user_id=test > /dev/null 2>&1; then
                  echo "✅ アプリケーションが正常に応答しています"
                  echo "🎉 デプロイが成功しました！"
                else
                  echo "⚠️ アプリケーションの応答に問題があります"
                  echo "📋 ログを確認:"
                  tail -20 app.log
                fi
              else
                echo "❌ ポート5000でリッスンしていません"
                echo "📋 ログを確認:"
                tail -20 app.log
                exit 1
              fi
            else
              echo "❌ プロセスが起動していません"
              echo "📋 ログを確認:"
              tail -20 app.log
              exit 1
            fi
